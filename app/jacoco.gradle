task jacocoTestReport(type: JacocoReport) {
    dependsOn = [
            'testDebugUnitTest',
            'createDebugCoverageReport',
    ]

    reports {
        html.enabled = true
    }

    def fileFilter = [
            '**/di/**', // DI
            '**/util/**', // Util
            '**/bindingadapter/**', // Util
            '**/extensions/**', // extensions
            '**/exception/**', // exception
            '**/*Fragment*.*', // Fragment
            '**/*Activity*.*', // Activity
            '**/*ListAdapter*.*', // ListAdapter
            '**/*Dialog*.*', // Dialog
            '**/*Application*.*', // Application
            '**/customview/**', // customview
            '**/model/**', // model
            '**/BuildConfig.*',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class'
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree, kotlinDebugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'outputs/unit_test_code_coverage/**/*.exec'
    ]))
}
